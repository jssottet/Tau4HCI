/*
* generated by Xtext
*/

package tudor.lu.modeling.transformation.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TauHCIGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRulesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRulesRuleParserRuleCall_0_0 = (RuleCall)cRulesAssignment_0.eContents().get(0);
		private final Assignment cSpecificRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecificRulesSpecificParserRuleCall_1_0 = (RuleCall)cSpecificRulesAssignment_1.eContents().get(0);
		private final Assignment cDomainRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainRulesDomainParserRuleCall_2_0 = (RuleCall)cDomainRulesAssignment_2.eContents().get(0);
		
		//Model:
		//	rules+=Rule* specificRules+=Specific* domainRules+=Domain*;
		public ParserRule getRule() { return rule; }

		//rules+=Rule* specificRules+=Specific* domainRules+=Domain*
		public Group getGroup() { return cGroup; }

		//rules+=Rule*
		public Assignment getRulesAssignment_0() { return cRulesAssignment_0; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_0_0() { return cRulesRuleParserRuleCall_0_0; }

		//specificRules+=Specific*
		public Assignment getSpecificRulesAssignment_1() { return cSpecificRulesAssignment_1; }

		//Specific
		public RuleCall getSpecificRulesSpecificParserRuleCall_1_0() { return cSpecificRulesSpecificParserRuleCall_1_0; }

		//domainRules+=Domain*
		public Assignment getDomainRulesAssignment_2() { return cDomainRulesAssignment_2; }

		//Domain
		public RuleCall getDomainRulesDomainParserRuleCall_2_0() { return cDomainRulesDomainParserRuleCall_2_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskRuleFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAuitypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAuitypeTypeParserRuleCall_1_0 = (RuleCall)cAuitypeAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cAndKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cTaskTypeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTaskTypeAUITypeParserRuleCall_2_0_1_0 = (RuleCall)cTaskTypeAssignment_2_0_1.eContents().get(0);
		private final Assignment cInteractivelyValidAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInteractivelyValidValidParserRuleCall_2_1_0 = (RuleCall)cInteractivelyValidAssignment_2_1.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUielementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUielementUIElementParserRuleCall_4_0 = (RuleCall)cUielementAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Rule:
		//	"task rule from" auitype=Type ("and" taskType=AUIType | interactivelyValid=Valid)? "to" uielement=UIElement ";";
		public ParserRule getRule() { return rule; }

		//"task rule from" auitype=Type ("and" taskType=AUIType | interactivelyValid=Valid)? "to" uielement=UIElement ";"
		public Group getGroup() { return cGroup; }

		//"task rule from"
		public Keyword getTaskRuleFromKeyword_0() { return cTaskRuleFromKeyword_0; }

		//auitype=Type
		public Assignment getAuitypeAssignment_1() { return cAuitypeAssignment_1; }

		//Type
		public RuleCall getAuitypeTypeParserRuleCall_1_0() { return cAuitypeTypeParserRuleCall_1_0; }

		//("and" taskType=AUIType | interactivelyValid=Valid)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"and" taskType=AUIType
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"and"
		public Keyword getAndKeyword_2_0_0() { return cAndKeyword_2_0_0; }

		//taskType=AUIType
		public Assignment getTaskTypeAssignment_2_0_1() { return cTaskTypeAssignment_2_0_1; }

		//AUIType
		public RuleCall getTaskTypeAUITypeParserRuleCall_2_0_1_0() { return cTaskTypeAUITypeParserRuleCall_2_0_1_0; }

		//interactivelyValid=Valid
		public Assignment getInteractivelyValidAssignment_2_1() { return cInteractivelyValidAssignment_2_1; }

		//Valid
		public RuleCall getInteractivelyValidValidParserRuleCall_2_1_0() { return cInteractivelyValidValidParserRuleCall_2_1_0; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//uielement=UIElement
		public Assignment getUielementAssignment_4() { return cUielementAssignment_4; }

		//UIElement
		public RuleCall getUielementUIElementParserRuleCall_4_0() { return cUielementUIElementParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class SpecificElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Specific");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecificRuleFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTaskNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cTaskNameAssignment_1.eContents().get(0);
		private final Keyword cInteractivelyValidKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUielementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUielementUIElementParserRuleCall_4_0 = (RuleCall)cUielementAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Specific:
		//	"specific rule from" taskName=STRING "interactivelyValid"? "to" uielement+=UIElement* ";";
		public ParserRule getRule() { return rule; }

		//"specific rule from" taskName=STRING "interactivelyValid"? "to" uielement+=UIElement* ";"
		public Group getGroup() { return cGroup; }

		//"specific rule from"
		public Keyword getSpecificRuleFromKeyword_0() { return cSpecificRuleFromKeyword_0; }

		//taskName=STRING
		public Assignment getTaskNameAssignment_1() { return cTaskNameAssignment_1; }

		//STRING
		public RuleCall getTaskNameSTRINGTerminalRuleCall_1_0() { return cTaskNameSTRINGTerminalRuleCall_1_0; }

		//"interactivelyValid"?
		public Keyword getInteractivelyValidKeyword_2() { return cInteractivelyValidKeyword_2; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//uielement+=UIElement*
		public Assignment getUielementAssignment_4() { return cUielementAssignment_4; }

		//UIElement
		public RuleCall getUielementUIElementParserRuleCall_4_0() { return cUielementUIElementParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainRuleFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDomainTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDomainTypeAttributeTypeParserRuleCall_1_0 = (RuleCall)cDomainTypeAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUielementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUielementUIElementParserRuleCall_3_0 = (RuleCall)cUielementAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Domain:
		//	"domain rule from" domainType=AttributeType "to" uielement=UIElement ";";
		public ParserRule getRule() { return rule; }

		//"domain rule from" domainType=AttributeType "to" uielement=UIElement ";"
		public Group getGroup() { return cGroup; }

		//"domain rule from"
		public Keyword getDomainRuleFromKeyword_0() { return cDomainRuleFromKeyword_0; }

		//domainType=AttributeType
		public Assignment getDomainTypeAssignment_1() { return cDomainTypeAssignment_1; }

		//AttributeType
		public RuleCall getDomainTypeAttributeTypeParserRuleCall_1_0() { return cDomainTypeAttributeTypeParserRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//uielement=UIElement
		public Assignment getUielementAssignment_3() { return cUielementAssignment_3; }

		//UIElement
		public RuleCall getUielementUIElementParserRuleCall_3_0() { return cUielementUIElementParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ValidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Valid");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cInteractiveKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNotinteractiveKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Valid:
		//	"interactive" | "notinteractive";
		public ParserRule getRule() { return rule; }

		//"interactive" | "notinteractive"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"interactive"
		public Keyword getInteractiveKeyword_0() { return cInteractiveKeyword_0; }

		//"notinteractive"
		public Keyword getNotinteractiveKeyword_1() { return cNotinteractiveKeyword_1; }
	}

	public class HasSubWindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HasSubWindow");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSubWindowsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNotsubWindowsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//HasSubWindow:
		//	"subWindows" | "notsubWindows";
		public ParserRule getRule() { return rule; }

		//"subWindows" | "notsubWindows"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"subWindows"
		public Keyword getSubWindowsKeyword_0() { return cSubWindowsKeyword_0; }

		//"notsubWindows"
		public Keyword getNotsubWindowsKeyword_1() { return cNotsubWindowsKeyword_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSelection_1_nKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSelection_n_nKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cContainerKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInputKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cOutputKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCommandKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cNavigationKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cRootKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//// This can be generated from TDA Metamodel enumeration of Type and AUI type from 
		//Type:
		//	"selection_1_n" | "selection_n_n" | "container" | "input" | "output" | "command" | "navigation" | "Root";
		public ParserRule getRule() { return rule; }

		//"selection_1_n" | "selection_n_n" | "container" | "input" | "output" | "command" | "navigation" | "Root"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"selection_1_n"
		public Keyword getSelection_1_nKeyword_0() { return cSelection_1_nKeyword_0; }

		//"selection_n_n"
		public Keyword getSelection_n_nKeyword_1() { return cSelection_n_nKeyword_1; }

		//"container"
		public Keyword getContainerKeyword_2() { return cContainerKeyword_2; }

		//"input"
		public Keyword getInputKeyword_3() { return cInputKeyword_3; }

		//"output"
		public Keyword getOutputKeyword_4() { return cOutputKeyword_4; }

		//"command"
		public Keyword getCommandKeyword_5() { return cCommandKeyword_5; }

		//"navigation"
		public Keyword getNavigationKeyword_6() { return cNavigationKeyword_6; }

		//"Root"
		public Keyword getRootKeyword_7() { return cRootKeyword_7; }
	}

	public class AUITypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AUIType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAbstractKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInteractiveKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cUserKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSystemKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//AUIType:
		//	"abstract" | "interactive" | "user" | "system";
		public ParserRule getRule() { return rule; }

		//"abstract" | "interactive" | "user" | "system"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"abstract"
		public Keyword getAbstractKeyword_0() { return cAbstractKeyword_0; }

		//"interactive"
		public Keyword getInteractiveKeyword_1() { return cInteractiveKeyword_1; }

		//"user"
		public Keyword getUserKeyword_2() { return cUserKeyword_2; }

		//"system"
		public Keyword getSystemKeyword_3() { return cSystemKeyword_3; }
	}

	public class UIElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWindowParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListElementSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cButtonParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPanelParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDataFieldParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cImageFieldParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTextFieldParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cTextAreaParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//// This can be generated from CUI metamodel
		//UIElement:
		//	Window | ListElementSelector | Button | Panel | DataField | ImageField | TextField | TextArea;
		public ParserRule getRule() { return rule; }

		//Window | ListElementSelector | Button | Panel | DataField | ImageField | TextField | TextArea
		public Alternatives getAlternatives() { return cAlternatives; }

		//Window
		public RuleCall getWindowParserRuleCall_0() { return cWindowParserRuleCall_0; }

		//ListElementSelector
		public RuleCall getListElementSelectorParserRuleCall_1() { return cListElementSelectorParserRuleCall_1; }

		//Button
		public RuleCall getButtonParserRuleCall_2() { return cButtonParserRuleCall_2; }

		//Panel
		public RuleCall getPanelParserRuleCall_3() { return cPanelParserRuleCall_3; }

		//DataField
		public RuleCall getDataFieldParserRuleCall_4() { return cDataFieldParserRuleCall_4; }

		//ImageField
		public RuleCall getImageFieldParserRuleCall_5() { return cImageFieldParserRuleCall_5; }

		//TextField
		public RuleCall getTextFieldParserRuleCall_6() { return cTextFieldParserRuleCall_6; }

		//TextArea
		public RuleCall getTextAreaParserRuleCall_7() { return cTextAreaParserRuleCall_7; }
	}

	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDocumentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDateKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//AttributeType:
		//	"string" | "text" | "document" | "date";
		public ParserRule getRule() { return rule; }

		//"string" | "text" | "document" | "date"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"string"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }

		//"text"
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }

		//"document"
		public Keyword getDocumentKeyword_2() { return cDocumentKeyword_2; }

		//"date"
		public Keyword getDateKeyword_3() { return cDateKeyword_3; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cTaskNameKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Label:
		//	STRING | "taskName";
		public ParserRule getRule() { return rule; }

		//STRING | "taskName"
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//"taskName"
		public Keyword getTaskNameKeyword_1() { return cTaskNameKeyword_1; }
	}

	public class WindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Window");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWindowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContainedElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContainedElementsConceptParserRuleCall_3_0 = (RuleCall)cContainedElementsAssignment_3.eContents().get(0);
		
		//Window:
		//	"Window" label=Label? "with" containedElements+=Concept;
		public ParserRule getRule() { return rule; }

		//"Window" label=Label? "with" containedElements+=Concept
		public Group getGroup() { return cGroup; }

		//"Window"
		public Keyword getWindowKeyword_0() { return cWindowKeyword_0; }

		//label=Label?
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }

		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }

		//containedElements+=Concept
		public Assignment getContainedElementsAssignment_3() { return cContainedElementsAssignment_3; }

		//Concept
		public RuleCall getContainedElementsConceptParserRuleCall_3_0() { return cContainedElementsConceptParserRuleCall_3_0; }
	}

	public class PanelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Panel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPanelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContainedElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContainedElementsConceptParserRuleCall_3_0 = (RuleCall)cContainedElementsAssignment_3.eContents().get(0);
		
		//Panel:
		//	"Panel" label=Label? "with" containedElements+=Concept;
		public ParserRule getRule() { return rule; }

		//"Panel" label=Label? "with" containedElements+=Concept
		public Group getGroup() { return cGroup; }

		//"Panel"
		public Keyword getPanelKeyword_0() { return cPanelKeyword_0; }

		//label=Label?
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }

		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }

		//containedElements+=Concept
		public Assignment getContainedElementsAssignment_3() { return cContainedElementsAssignment_3; }

		//Concept
		public RuleCall getContainedElementsConceptParserRuleCall_3_0() { return cContainedElementsConceptParserRuleCall_3_0; }
	}

	public class ListElementSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListElementSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListElementSelectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cContainedElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cContainedElementsConceptParserRuleCall_2_1_0 = (RuleCall)cContainedElementsAssignment_2_1.eContents().get(0);
		
		//ListElementSelector:
		//	"ListElementSelector" label=Label? ("with" containedElements+=Concept)?;
		public ParserRule getRule() { return rule; }

		//"ListElementSelector" label=Label? ("with" containedElements+=Concept)?
		public Group getGroup() { return cGroup; }

		//"ListElementSelector"
		public Keyword getListElementSelectorKeyword_0() { return cListElementSelectorKeyword_0; }

		//label=Label?
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }

		//("with" containedElements+=Concept)?
		public Group getGroup_2() { return cGroup_2; }

		//"with"
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }

		//containedElements+=Concept
		public Assignment getContainedElementsAssignment_2_1() { return cContainedElementsAssignment_2_1; }

		//Concept
		public RuleCall getContainedElementsConceptParserRuleCall_2_1_0() { return cContainedElementsConceptParserRuleCall_2_1_0; }
	}

	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Concept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAllConceptsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNoConceptsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Assignment cSelectionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSelectionSelectedConceptParserRuleCall_2_0 = (RuleCall)cSelectionAssignment_2.eContents().get(0);
		
		//Concept:
		//	"All Concepts" | "No Concepts" | selection+=SelectedConcept*;
		public ParserRule getRule() { return rule; }

		//"All Concepts" | "No Concepts" | selection+=SelectedConcept*
		public Alternatives getAlternatives() { return cAlternatives; }

		//"All Concepts"
		public Keyword getAllConceptsKeyword_0() { return cAllConceptsKeyword_0; }

		//"No Concepts"
		public Keyword getNoConceptsKeyword_1() { return cNoConceptsKeyword_1; }

		//selection+=SelectedConcept*
		public Assignment getSelectionAssignment_2() { return cSelectionAssignment_2; }

		//SelectedConcept
		public RuleCall getSelectionSelectedConceptParserRuleCall_2_0() { return cSelectionSelectedConceptParserRuleCall_2_0; }
	}

	public class SelectedConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectedConcept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConceptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		
		//SelectedConcept:
		//	"concept" "name" id=ID;
		public ParserRule getRule() { return rule; }

		//"concept" "name" id=ID
		public Group getGroup() { return cGroup; }

		//"concept"
		public Keyword getConceptKeyword_0() { return cConceptKeyword_0; }

		//"name"
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }

		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }
	}

	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//Button:
		//	"Button" label=Label?;
		public ParserRule getRule() { return rule; }

		//"Button" label=Label?
		public Group getGroup() { return cGroup; }

		//"Button"
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }

		//label=Label?
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }
	}

	public class DataFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//DataField:
		//	"DataField" label=Label?;
		public ParserRule getRule() { return rule; }

		//"DataField" label=Label?
		public Group getGroup() { return cGroup; }

		//"DataField"
		public Keyword getDataFieldKeyword_0() { return cDataFieldKeyword_0; }

		//label=Label?
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }
	}

	public class ImageFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImageField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//ImageField:
		//	"ImageField" label=Label?;
		public ParserRule getRule() { return rule; }

		//"ImageField" label=Label?
		public Group getGroup() { return cGroup; }

		//"ImageField"
		public Keyword getImageFieldKeyword_0() { return cImageFieldKeyword_0; }

		//label=Label?
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }
	}

	public class TextFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//TextField:
		//	"TextField" label=Label?;
		public ParserRule getRule() { return rule; }

		//"TextField" label=Label?
		public Group getGroup() { return cGroup; }

		//"TextField"
		public Keyword getTextFieldKeyword_0() { return cTextFieldKeyword_0; }

		//label=Label?
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }
	}

	public class TextAreaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextArea");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextAreaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//TextArea:
		//	"TextArea" label=Label?;
		public ParserRule getRule() { return rule; }

		//"TextArea" label=Label?
		public Group getGroup() { return cGroup; }

		//"TextArea"
		public Keyword getTextAreaKeyword_0() { return cTextAreaKeyword_0; }

		//label=Label?
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }
	}
	
	
	private ModelElements pModel;
	private RuleElements pRule;
	private SpecificElements pSpecific;
	private DomainElements pDomain;
	private ValidElements pValid;
	private HasSubWindowElements pHasSubWindow;
	private TypeElements pType;
	private AUITypeElements pAUIType;
	private UIElementElements pUIElement;
	private AttributeTypeElements pAttributeType;
	private LabelElements pLabel;
	private WindowElements pWindow;
	private PanelElements pPanel;
	private ListElementSelectorElements pListElementSelector;
	private ConceptElements pConcept;
	private SelectedConceptElements pSelectedConcept;
	private ButtonElements pButton;
	private DataFieldElements pDataField;
	private ImageFieldElements pImageField;
	private TextFieldElements pTextField;
	private TextAreaElements pTextArea;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public TauHCIGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	rules+=Rule* specificRules+=Specific* domainRules+=Domain*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Rule:
	//	"task rule from" auitype=Type ("and" taskType=AUIType | interactivelyValid=Valid)? "to" uielement=UIElement ";";
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//Specific:
	//	"specific rule from" taskName=STRING "interactivelyValid"? "to" uielement+=UIElement* ";";
	public SpecificElements getSpecificAccess() {
		return (pSpecific != null) ? pSpecific : (pSpecific = new SpecificElements());
	}
	
	public ParserRule getSpecificRule() {
		return getSpecificAccess().getRule();
	}

	//Domain:
	//	"domain rule from" domainType=AttributeType "to" uielement=UIElement ";";
	public DomainElements getDomainAccess() {
		return (pDomain != null) ? pDomain : (pDomain = new DomainElements());
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}

	//Valid:
	//	"interactive" | "notinteractive";
	public ValidElements getValidAccess() {
		return (pValid != null) ? pValid : (pValid = new ValidElements());
	}
	
	public ParserRule getValidRule() {
		return getValidAccess().getRule();
	}

	//HasSubWindow:
	//	"subWindows" | "notsubWindows";
	public HasSubWindowElements getHasSubWindowAccess() {
		return (pHasSubWindow != null) ? pHasSubWindow : (pHasSubWindow = new HasSubWindowElements());
	}
	
	public ParserRule getHasSubWindowRule() {
		return getHasSubWindowAccess().getRule();
	}

	//// This can be generated from TDA Metamodel enumeration of Type and AUI type from 
	//Type:
	//	"selection_1_n" | "selection_n_n" | "container" | "input" | "output" | "command" | "navigation" | "Root";
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//AUIType:
	//	"abstract" | "interactive" | "user" | "system";
	public AUITypeElements getAUITypeAccess() {
		return (pAUIType != null) ? pAUIType : (pAUIType = new AUITypeElements());
	}
	
	public ParserRule getAUITypeRule() {
		return getAUITypeAccess().getRule();
	}

	//// This can be generated from CUI metamodel
	//UIElement:
	//	Window | ListElementSelector | Button | Panel | DataField | ImageField | TextField | TextArea;
	public UIElementElements getUIElementAccess() {
		return (pUIElement != null) ? pUIElement : (pUIElement = new UIElementElements());
	}
	
	public ParserRule getUIElementRule() {
		return getUIElementAccess().getRule();
	}

	//AttributeType:
	//	"string" | "text" | "document" | "date";
	public AttributeTypeElements getAttributeTypeAccess() {
		return (pAttributeType != null) ? pAttributeType : (pAttributeType = new AttributeTypeElements());
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//Label:
	//	STRING | "taskName";
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Window:
	//	"Window" label=Label? "with" containedElements+=Concept;
	public WindowElements getWindowAccess() {
		return (pWindow != null) ? pWindow : (pWindow = new WindowElements());
	}
	
	public ParserRule getWindowRule() {
		return getWindowAccess().getRule();
	}

	//Panel:
	//	"Panel" label=Label? "with" containedElements+=Concept;
	public PanelElements getPanelAccess() {
		return (pPanel != null) ? pPanel : (pPanel = new PanelElements());
	}
	
	public ParserRule getPanelRule() {
		return getPanelAccess().getRule();
	}

	//ListElementSelector:
	//	"ListElementSelector" label=Label? ("with" containedElements+=Concept)?;
	public ListElementSelectorElements getListElementSelectorAccess() {
		return (pListElementSelector != null) ? pListElementSelector : (pListElementSelector = new ListElementSelectorElements());
	}
	
	public ParserRule getListElementSelectorRule() {
		return getListElementSelectorAccess().getRule();
	}

	//Concept:
	//	"All Concepts" | "No Concepts" | selection+=SelectedConcept*;
	public ConceptElements getConceptAccess() {
		return (pConcept != null) ? pConcept : (pConcept = new ConceptElements());
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}

	//SelectedConcept:
	//	"concept" "name" id=ID;
	public SelectedConceptElements getSelectedConceptAccess() {
		return (pSelectedConcept != null) ? pSelectedConcept : (pSelectedConcept = new SelectedConceptElements());
	}
	
	public ParserRule getSelectedConceptRule() {
		return getSelectedConceptAccess().getRule();
	}

	//Button:
	//	"Button" label=Label?;
	public ButtonElements getButtonAccess() {
		return (pButton != null) ? pButton : (pButton = new ButtonElements());
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}

	//DataField:
	//	"DataField" label=Label?;
	public DataFieldElements getDataFieldAccess() {
		return (pDataField != null) ? pDataField : (pDataField = new DataFieldElements());
	}
	
	public ParserRule getDataFieldRule() {
		return getDataFieldAccess().getRule();
	}

	//ImageField:
	//	"ImageField" label=Label?;
	public ImageFieldElements getImageFieldAccess() {
		return (pImageField != null) ? pImageField : (pImageField = new ImageFieldElements());
	}
	
	public ParserRule getImageFieldRule() {
		return getImageFieldAccess().getRule();
	}

	//TextField:
	//	"TextField" label=Label?;
	public TextFieldElements getTextFieldAccess() {
		return (pTextField != null) ? pTextField : (pTextField = new TextFieldElements());
	}
	
	public ParserRule getTextFieldRule() {
		return getTextFieldAccess().getRule();
	}

	//TextArea:
	//	"TextArea" label=Label?;
	public TextAreaElements getTextAreaAccess() {
		return (pTextArea != null) ? pTextArea : (pTextArea = new TextAreaElements());
	}
	
	public ParserRule getTextAreaRule() {
		return getTextAreaAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
