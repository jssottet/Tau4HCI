/*
* generated by Xtext
*/
package tudor.lu.modeling.transformation.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import tudor.lu.modeling.transformation.services.TauHCIGrammarAccess;

public class TauHCIParser extends AbstractContentAssistParser {
	
	@Inject
	private TauHCIGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected tudor.lu.modeling.transformation.ui.contentassist.antlr.internal.InternalTauHCIParser createParser() {
		tudor.lu.modeling.transformation.ui.contentassist.antlr.internal.InternalTauHCIParser result = new tudor.lu.modeling.transformation.ui.contentassist.antlr.internal.InternalTauHCIParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRuleAccess().getAlternatives_2(), "rule__Rule__Alternatives_2");
					put(grammarAccess.getValidAccess().getAlternatives(), "rule__Valid__Alternatives");
					put(grammarAccess.getHasSubWindowAccess().getAlternatives(), "rule__HasSubWindow__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getAUITypeAccess().getAlternatives(), "rule__AUIType__Alternatives");
					put(grammarAccess.getUIElementAccess().getAlternatives(), "rule__UIElement__Alternatives");
					put(grammarAccess.getAttributeTypeAccess().getAlternatives(), "rule__AttributeType__Alternatives");
					put(grammarAccess.getLabelAccess().getAlternatives(), "rule__Label__Alternatives");
					put(grammarAccess.getConceptAccess().getAlternatives(), "rule__Concept__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getRuleAccess().getGroup_2_0(), "rule__Rule__Group_2_0__0");
					put(grammarAccess.getSpecificAccess().getGroup(), "rule__Specific__Group__0");
					put(grammarAccess.getDomainAccess().getGroup(), "rule__Domain__Group__0");
					put(grammarAccess.getWindowAccess().getGroup(), "rule__Window__Group__0");
					put(grammarAccess.getPanelAccess().getGroup(), "rule__Panel__Group__0");
					put(grammarAccess.getListElementSelectorAccess().getGroup(), "rule__ListElementSelector__Group__0");
					put(grammarAccess.getListElementSelectorAccess().getGroup_2(), "rule__ListElementSelector__Group_2__0");
					put(grammarAccess.getSelectedConceptAccess().getGroup(), "rule__SelectedConcept__Group__0");
					put(grammarAccess.getButtonAccess().getGroup(), "rule__Button__Group__0");
					put(grammarAccess.getDataFieldAccess().getGroup(), "rule__DataField__Group__0");
					put(grammarAccess.getImageFieldAccess().getGroup(), "rule__ImageField__Group__0");
					put(grammarAccess.getTextFieldAccess().getGroup(), "rule__TextField__Group__0");
					put(grammarAccess.getTextAreaAccess().getGroup(), "rule__TextArea__Group__0");
					put(grammarAccess.getModelAccess().getRulesAssignment_0(), "rule__Model__RulesAssignment_0");
					put(grammarAccess.getModelAccess().getSpecificRulesAssignment_1(), "rule__Model__SpecificRulesAssignment_1");
					put(grammarAccess.getModelAccess().getDomainRulesAssignment_2(), "rule__Model__DomainRulesAssignment_2");
					put(grammarAccess.getRuleAccess().getAuitypeAssignment_1(), "rule__Rule__AuitypeAssignment_1");
					put(grammarAccess.getRuleAccess().getTaskTypeAssignment_2_0_1(), "rule__Rule__TaskTypeAssignment_2_0_1");
					put(grammarAccess.getRuleAccess().getInteractivelyValidAssignment_2_1(), "rule__Rule__InteractivelyValidAssignment_2_1");
					put(grammarAccess.getRuleAccess().getUielementAssignment_4(), "rule__Rule__UielementAssignment_4");
					put(grammarAccess.getSpecificAccess().getTaskNameAssignment_1(), "rule__Specific__TaskNameAssignment_1");
					put(grammarAccess.getSpecificAccess().getUielementAssignment_4(), "rule__Specific__UielementAssignment_4");
					put(grammarAccess.getDomainAccess().getDomainTypeAssignment_1(), "rule__Domain__DomainTypeAssignment_1");
					put(grammarAccess.getDomainAccess().getUielementAssignment_3(), "rule__Domain__UielementAssignment_3");
					put(grammarAccess.getWindowAccess().getLabelAssignment_1(), "rule__Window__LabelAssignment_1");
					put(grammarAccess.getWindowAccess().getContainedElementsAssignment_3(), "rule__Window__ContainedElementsAssignment_3");
					put(grammarAccess.getPanelAccess().getLabelAssignment_1(), "rule__Panel__LabelAssignment_1");
					put(grammarAccess.getPanelAccess().getContainedElementsAssignment_3(), "rule__Panel__ContainedElementsAssignment_3");
					put(grammarAccess.getListElementSelectorAccess().getLabelAssignment_1(), "rule__ListElementSelector__LabelAssignment_1");
					put(grammarAccess.getListElementSelectorAccess().getContainedElementsAssignment_2_1(), "rule__ListElementSelector__ContainedElementsAssignment_2_1");
					put(grammarAccess.getConceptAccess().getSelectionAssignment_2(), "rule__Concept__SelectionAssignment_2");
					put(grammarAccess.getSelectedConceptAccess().getIdAssignment_2(), "rule__SelectedConcept__IdAssignment_2");
					put(grammarAccess.getButtonAccess().getLabelAssignment_1(), "rule__Button__LabelAssignment_1");
					put(grammarAccess.getDataFieldAccess().getLabelAssignment_1(), "rule__DataField__LabelAssignment_1");
					put(grammarAccess.getImageFieldAccess().getLabelAssignment_1(), "rule__ImageField__LabelAssignment_1");
					put(grammarAccess.getTextFieldAccess().getLabelAssignment_1(), "rule__TextField__LabelAssignment_1");
					put(grammarAccess.getTextAreaAccess().getLabelAssignment_1(), "rule__TextArea__LabelAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			tudor.lu.modeling.transformation.ui.contentassist.antlr.internal.InternalTauHCIParser typedParser = (tudor.lu.modeling.transformation.ui.contentassist.antlr.internal.InternalTauHCIParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public TauHCIGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TauHCIGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
